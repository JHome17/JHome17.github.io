<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://JHome17.github.io</id>
    <title>欢迎来到艺术家的代码世界</title>
    <updated>2023-04-18T12:58:13.179Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://JHome17.github.io"/>
    <link rel="self" href="https://JHome17.github.io/atom.xml"/>
    <subtitle>艺术与代码，机械艺术</subtitle>
    <logo>https://JHome17.github.io/images/avatar.png</logo>
    <icon>https://JHome17.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, 欢迎来到艺术家的代码世界</rights>
    <entry>
        <title type="html"><![CDATA[🤐Mac端安装Hexo环境流程【有部分可参考windows平台那篇文章】]]></title>
        <id>https://JHome17.github.io/post/mac-duan-an-zhuang-hexo-huan-jing-liu-cheng/</id>
        <link href="https://JHome17.github.io/post/mac-duan-an-zhuang-hexo-huan-jing-liu-cheng/">
        </link>
        <updated>2023-04-18T10:47:05.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="前言">前言</h1>
<blockquote>
<p>1、安装Node.js<br>
2、安装Git工具的方法<br>
3、检查上面的安装成果<br>
4、安装Hexo<br>
5、初始化Hexo，换目录<br>
6、安装hexo-theme-async主题<br>
7、启用本地Hexo端<br>
8、部署到GitHub</p>
<blockquote>
<p>Mac系统下查看和生成SSH Key</p>
</blockquote>
</blockquote>
<p>大概流程参考之前windows平台配置的文章</p>
<blockquote>
<p>参考网址：<a href="https://zhuanlan.zhihu.com/p/111014448">https://zhuanlan.zhihu.com/p/111014448</a>，评论区有不少错误问题可供参考。</p>
</blockquote>
<h1 id="1-安装nodejs">1、安装Node.js</h1>
<p>node.js官网：<a href="https://nodejs.org/en">https://nodejs.org/en</a>，选择稳定版（非最新版）下载后，无脑安装就行了。<br>
<img src="https://JHome17.github.io/post-images/1681816462731.png" alt="" loading="lazy"></p>
<h1 id="2-mac-安装-git-工具的方法">2、Mac 安装 git 工具的方法</h1>
<h2 id="可以参考以下四个博客链接">可以参考以下四个博客链接：</h2>
<p>三种常见的 Mac 安装 git 工具的方法<a href="https://blog.csdn.net/liuzehn/article/details/124313436">https://blog.csdn.net/liuzehn/article/details/124313436</a><br>
mac系统安装git 详细教程<a href="https://blog.csdn.net/weixin_44719880/article/details/129411558">https://blog.csdn.net/weixin_44719880/article/details/129411558</a><br>
Mac(M1版本)安装与卸载Git<a href="https://blog.csdn.net/zjwqsn/article/details/129297101">https://blog.csdn.net/zjwqsn/article/details/129297101</a><br>
Mac M1芯片下安装/迁移Homebrew<a href="https://blog.csdn.net/Fponyo/article/details/124645743">https://blog.csdn.net/Fponyo/article/details/124645743</a></p>
<h2 id="不用看上面链接啦直接总结在这里推荐方法1">不用看上面链接啦，直接总结在这里，推荐方法1</h2>
<h3 id="方法1-brew法">方法1、Brew法</h3>
<p>**虽然Brew有官网，但是由于某些网络原因会安装失败，所以使用参考链接里面的方法，同样的会写在这篇文章里面，**附上官网地址：<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a><br>
参考链接：<a href="https://zhuanlan.zhihu.com/p/111014448">https://zhuanlan.zhihu.com/p/111014448</a></p>
<h4 id="苹果电脑-常规安装脚本推荐-完全体-几分钟安装完成">苹果电脑 常规安装脚本（推荐 完全体 几分钟安装完成）：</h4>
<pre><code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;  
</code></pre>
<h4 id="苹果电脑-卸载脚本">苹果电脑 卸载脚本：</h4>
<pre><code>/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)&quot;
</code></pre>
<h4 id="安装代码显示如图需要输入密码就直接输入安装完成后会要求选择不同线路来配置-看图">安装代码显示如图，需要输入密码就直接输入，安装完成后会要求选择不同线路来配置。看图</h4>
<p><img src="https://JHome17.github.io/post-images/1681817522635.png" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1681817830787.png" alt="" loading="lazy"></p>
<h3 id="方法2-下载git的macos安装包安装可不看">方法2、下载git的MacOS安装包安装（可不看）</h3>
<h4 id="下载地址httpsgit-scmcomdownloadmac点击版本号即可跳转自动下载无脑安装没试过这个方法应该是需要自己单独配置的">下载地址：<a href="https://git-scm.com/download/mac">https://git-scm.com/download/mac</a>，点击版本号，即可跳转自动下载，无脑安装（没试过这个方法，应该是需要自己单独配置的）</h4>
<figure data-type="image" tabindex="1"><img src="https://JHome17.github.io/post-images/1681818022561.png" alt="" loading="lazy"></figure>
<h4 id="以下引用自httpsblogcsdnnetweixin_44719880articledetails129411558">以下引用自<a href="https://blog.csdn.net/weixin_44719880/article/details/129411558">https://blog.csdn.net/weixin_44719880/article/details/129411558</a></h4>
<blockquote>
<p>接下来我们去配置git环境</p>
</blockquote>
<pre><code> vim ~/.zshrc
#输入i进入编辑模式
#添加下面这句话，版本需要进入/opt/homebrew/Cellar/git/目录下查看
export GIT=/opt/homebrew/Cellar/git/2.39.2
#然后按esc，在输入:wq退出编辑模式并保存
#通过source命令更新~/.zshrc文件
source ~/.zshrc
#现在就可以通过git --version查看一下安装的版本了 
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://JHome17.github.io/post-images/1681818307378.png" alt="" loading="lazy"></figure>
<blockquote>
<p>设置git信息（这个在后面讲到配置git的时候会操作）</p>
</blockquote>
<pre><code>git config --global user.name &quot;git账号&quot;
git config --global user.email &quot;git邮箱&quot;
#通过git config --list来查看配置
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://JHome17.github.io/post-images/1681818419651.png" alt="" loading="lazy"></figure>
<h1 id="3-检查是否安装成果">3、检查是否安装成果</h1>
<pre><code>node -v
npm -v
git -v 
</code></pre>
<h4 id="出现对于的版本号就是成功了">出现对于的版本号，就是成功了。</h4>
<h1 id="4-正式安装hexo">4、正式安装Hexo</h1>
<h4 id="打开终端就在实用工具里面直接打开就可">打开终端（就在实用工具里面直接打开就可）</h4>
<h4 id="输入sudo-susudo-su-运行sudo命令给su命令提权具体自行百度">输入sudo su，sudo su 运行sudo命令给su命令提权，具体自行百度</h4>
<p><code>sudo su</code></p>
<h4 id="然后输入密码进入管理员模式-密码输入默认看不到">然后输入密码，进入管理员模式。(密码输入默认看不到)</h4>
<h4 id="安装hexo">安装hexo</h4>
<p><code>npm install -g hexo-cli</code></p>
<h4 id="这里报错npm不是最新版本要升级按照提示输入代码升级之后再安装一次hexo代码即可">这里报错，npm不是最新版本要升级，按照提示输入代码升级之后再安装一次hexo代码即可。</h4>
<figure data-type="image" tabindex="4"><img src="https://JHome17.github.io/post-images/1681819181032.png" alt="" loading="lazy"></figure>
<h4 id="再次安装hexo并通过hexo-v显示版本号来检查是否成功">再次安装hexo，并通过<code>hexo -v</code>显示版本号来检查是否成功</h4>
<h1 id="5-初始化hexo涉及到换目录">5、初始化Hexo，涉及到换目录</h1>
<h4 id="使用pwd查看当前目录看不看不重要">使用<code>pwd</code>查看当前目录（看不看不重要）</h4>
<h4 id="这里是切换到了自己的本地目录路径直接复制过来这样就会把hexo安装到指定的目录了">这里是切换到了自己的本地目录，路径直接复制过来，这样就会把hexo安装到指定的目录了。</h4>
<p><code>hexo init /Users/satanlu/Documents/Hexo-ZuoPin</code><br>
<img src="https://JHome17.github.io/post-images/1681819606656.png" alt="" loading="lazy"></p>
<h4 id="接着进入到本地hexo的目录cd-你的目录也可以在访达里面打开该文件夹右键-服务-新建位于文件夹位置的终端窗口">接着进入到本地hexo的目录<code>cd 你的目录</code>，也可以在访达里面打开该文件夹，右键-服务-新建位于文件夹位置的终端窗口。</h4>
<p><img src="https://JHome17.github.io/post-images/1681819794132.png" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1681819800042.png" alt="" loading="lazy"></p>
<h1 id="6-安装hexo-theme-async主题">6、安装hexo-theme-async主题</h1>
<h4 id="主题git主页httpsgithubcommalunshexo-theme-async">主题git主页：<a href="https://github.com/MaLuns/hexo-theme-async">https://github.com/MaLuns/hexo-theme-async</a></h4>
<h4 id="使用指南httpsasync-docsimaluncomguide">使用指南：<a href="https://async-docs.imalun.com/guide/">https://async-docs.imalun.com/guide/</a></h4>
<blockquote>
<p>如果您没有 ejs 与 less 的渲染器，请先安装： hexo-renderer-ejs 和 hexo-renderer-less。</p>
</blockquote>
<pre><code>npm install --save hexo-renderer-less hexo-renderer-ejs
</code></pre>
<p>或者</p>
<pre><code>yarn add -D hexo-renderer-less hexo-renderer-ejs
</code></pre>
<h3 id="1-安装主题-install">1、安装主题 Install</h3>
<h4 id="进入您的-hexo-博客根目录执行">进入您的 Hexo 博客根目录，执行：</h4>
<pre><code>npm i hexo-theme-async@latest 
</code></pre>
<h3 id="2-启用主题-use">2、启用主题 Use</h3>
<h4 id="修改-hexo-站点配置文件-_configyml">修改 Hexo 站点配置文件<code> _config.yml</code>。</h4>
<pre><code># 将主题设置为 hexo-theme-async
theme: async

</code></pre>
<p>主题安装位置如图：<br>
<img src="https://JHome17.github.io/post-images/1681821236176.png" alt="" loading="lazy"></p>
<h4 id="其他个性化配置不再赘述参考使用指南即可">其他个性化配置不再赘述，参考《使用指南》即可</h4>
<h1 id="7-启用本地hexo端">7、启用本地Hexo端</h1>
<p>首先，大家要输入</p>
<p><code>hexo clear</code><br>
再输入</p>
<p><code>hexo g</code><br>
最后再输入</p>
<p><code>hexo s</code><br>
就可以了，如果不报错的话。</p>
<p>接下来访问http://localhost:4000/链接，如果访问不了就访问http://127.0.0.1:4000/链接。如果还不行的话去看host。</p>
<p><code>hexo d</code>上传到服务器（下面会用到）</p>
<h1 id="8-部署到github同windows平台的部署">8、部署到GitHub（同windows平台的部署）</h1>
<h4 id="主要写下步骤以及和win不同之处省略的查看windows平台那篇文章">主要写下步骤，以及和win不同之处，省略的查看windows平台那篇文章</h4>
<p>1、注册gihub账号。记住用户名和密码。<br>
2、新疆代码仓库，设置名字，与用户名一致<br>
3、绑定ssh密钥（这里查看ssh密钥的方法一样，其他都一样，参考windows的第七步绑定ssh，要先生成ssh才能查看）<br>
Mac系统下查看和生成SSH Key</p>
<pre><code>cat /Users/xxx/.ssh/id_rsa.pub
</code></pre>
<p>xxx是你的电脑用户名，例如：howieMacBook-Pro:~ howie$中的howie关键字。<br>
复制生成好的SSH Key 添加到 GitLab 或者GitHub中的SSH Key中即可。</p>
<pre><code>cat /Users/SatanLu/.ssh/id_rsa.pub
</code></pre>
<figure data-type="image" tabindex="5"><img src="https://JHome17.github.io/post-images/1681822210872.png" alt="" loading="lazy"></figure>
<p>4、为Hexo链接到GitHub而做的配置，修改配置文件，添加仓库名和分支，注意token的使用，我这里直接改了永久，就不用每隔30天更新了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[😎Git安装教程之Windows【搬运+添加了新链接】]]></title>
        <id>https://JHome17.github.io/post/git-an-zhuang-jiao-cheng-zhi-windowsban-yun-tian-jia-liao-xin-lian-jie/</id>
        <link href="https://JHome17.github.io/post/git-an-zhuang-jiao-cheng-zhi-windowsban-yun-tian-jia-liao-xin-lian-jie/">
        </link>
        <updated>2022-12-06T15:47:44.000Z</updated>
        <content type="html"><![CDATA[<h1 id="下载地址">下载地址</h1>
<p><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a>，下载慢可以开启梯子的全局模式，<br>
或者去淘宝镜像下载<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">https://registry.npmmirror.com/binary.html?path=git-for-windows/</a></p>
<p>参考文章：<a href="https://blog.csdn.net/qingbo_2920249511/article/details/121465228">https://blog.csdn.net/qingbo_2920249511/article/details/121465228</a></p>
<blockquote>
<p>建议下载 Standalone Installer 版本，就是独立安装程序<br>
<img src="https://JHome17.github.io/post-images/1670342069228.jpg" alt="" loading="lazy"></p>
</blockquote>
<h1 id="git安装过程">Git安装过程</h1>
<p>双击看到的第一个界面如下图：</p>
<h2 id="01使用许可声明">01使用许可声明</h2>
<p><img src="https://JHome17.github.io/post-images/1670342409628.png" alt="" loading="lazy"><br>
点击“Next”进入下图页面：</p>
<h2 id="02选择安装路径">02选择安装路径</h2>
<p><img src="https://JHome17.github.io/post-images/1670342438315.png" alt="" loading="lazy"><br>
在输入框内输入想要安装到的本机路径，也就是实际文件夹位置，或点击“Browse...”选择已经存在的文件夹，然后点击“Next”按钮继续，进入下图界面：</p>
<h2 id="03选择安装组件">03选择安装组件</h2>
<p><img src="https://JHome17.github.io/post-images/1670342571926.png" alt="" loading="lazy"><br>
上图红框内的选项是默认勾选的，建议不要动。绿色框1是决定是否在桌面创建快捷方式的。绿色框2是决定在所有控制台窗口中使用TrueType字体和是否每天检查Git是否有Windows更新的。这些根据自己需要选择。<br>
点击“Next”按钮进入下图界面：</p>
<h2 id="04选择开始菜单页">04选择开始菜单页</h2>
<p><img src="https://JHome17.github.io/post-images/1670342632305.png" alt="" loading="lazy"><br>
这个界面是创建开始菜单中的名称，不需要修改，直接点“Next”按钮继续到下图的界面：</p>
<h2 id="05选择git文件默认的编辑器">05选择Git文件默认的编辑器</h2>
<p><img src="https://JHome17.github.io/post-images/1670342662594.png" alt="" loading="lazy"><br>
这个页面是在选择Git文件默认的编辑器，很少用到，所以默认Vim即可，直接点“Next”按钮继续到下图的界面：</p>
<h2 id="06调整您的path环境">06调整您的PATH环境</h2>
<p><img src="https://JHome17.github.io/post-images/1670342691812.png" alt="" loading="lazy"><br>
这个界面是调整您的PATH环境。</p>
<p>第一种配置是“仅从Git Bash使用Git”。这是最安全的选择，因为您的PATH根本不会被修改。您只能使用 Git Bash 的 Git 命令行工具。但是这将不能通过第三方软件使用。</p>
<p>第二种配置是“从命令行以及第三方软件进行Git”。该选项被认为是安全的，因为它仅向PATH添加了一些最小的Git包装器，以避免使用可选的Unix工具造成环境混乱。<br>
您将能够从Git Bash，命令提示符和Windows PowerShell以及在PATH中寻找Git的任何第三方软件中使用Git。这也是推荐的选项。</p>
<p>第三种配置是“从命令提示符使用Git和可选的Unix工具”。警告：这将覆盖Windows工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。</p>
<p>我选择推荐的选项第二种配置，点击“Next”按钮继续到下图的界面：</p>
<h2 id="07选择https后端传输">07选择HTTPS后端传输</h2>
<p><img src="https://JHome17.github.io/post-images/1670342746098.png" alt="" loading="lazy"><br>
这个界面是选择HTTPS后端传输。</p>
<p>第一个选项是“使用 OpenSSL 库”。服务器证书将使用ca-bundle.crt文件进行验证。这也是我们常用的选项。</p>
<p>第二个选项是“使用本地 Windows 安全通道库”。服务器证书将使用Windows证书存储验证。此选项还允许您使用公司的内部根CA证书，例如通过Active Directory Domain Services 。</p>
<p>我使用默认选项第一项，点击“Next”按钮继续到下图的界面：</p>
<h2 id="08配置行尾符号转换">08配置行尾符号转换</h2>
<p><img src="https://JHome17.github.io/post-images/1670342781016.png" alt="" loading="lazy"><br>
这个界面是配置行尾符号转换。</p>
<p>第一个选项是“签出Windows风格，提交Unix风格的行尾”。签出文本文件时，Git会将LF转换为CRLF。提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Windows上的推荐设置（“ core.autocrlf”设置为“ true”）</p>
<p>第二个选项是“按原样签出，提交Unix样式的行尾”。签出文本文件时，Git不会执行任何转换。 提交文本文件时，CRLF将转换为LF。对于跨平台项目，这是Unix上的建议设置（“ core.autocrlf”设置为“ input”）</p>
<p>第三种选项是“按原样签出，按原样提交”。当签出或提交文本文件时，Git不会执行任何转换。不建议跨平台项目选择此选项（“ core.autocrlf”设置为“ false”）</p>
<p>我选择第一种选项，点击“Next”按钮继续到下图的界面：</p>
<h2 id="09配置终端模拟器以与git-bash一起使用">09配置终端模拟器以与Git Bash一起使用</h2>
<p><img src="https://JHome17.github.io/post-images/1670342830119.png" alt="" loading="lazy"><br>
这个界面是配置终端模拟器以与Git Bash一起使用。</p>
<p>第一个选项是“使用MinTTY（MSYS2的默认终端）”。Git Bash将使用MinTTY作为终端模拟器，该模拟器具有可调整大小的窗口，非矩形选择和Unicode字体。Windows控制台程序（例如交互式Python）必须通过“ winpty”启动才能在MinTTY中运行。</p>
<p>第二个选项是“使用Windows的默认控制台窗口”。Git将使用Windows的默认控制台窗口（“cmd.exe”），该窗口可以与Win32控制台程序（如交互式Python或node.js）一起使用，但默认的回滚非常有限，需要配置为使用unicode 字体以正确显示非ASCII字符，并且在Windows 10之前，其窗口不能自由调整大小，并且只允许矩形文本选择。</p>
<p>我选择默认的第一种选项，点击“Next”按钮继续到下图的界面：</p>
<h2 id="10配置配置额外的选项">10配置配置额外的选项</h2>
<p><img src="https://JHome17.github.io/post-images/1670342851527.png" alt="" loading="lazy"><br>
这个界面是配置配置额外的选项。</p>
<p>第一个选项是“启用文件系统缓存”。文件系统数据将被批量读取并缓存在内存中用于某些操作（“core.fscache”设置为“true”）。 这提供了显著的性能提升。</p>
<p>第二个选项是“启用Git凭证管理器”。Windows的Git凭证管理器为Windows提供安全的Git凭证存储，最显着的是对Visual Studio Team Services和GitHub的多因素身份验证支持。 （需要.NET Framework v4.5.1或更高版本）。</p>
<p>第三个选项是“启用符号链接”。启用符号链接（需要SeCreateSymbolicLink权限）。请注意，现有存储库不受此设置的影响。</p>
<p>我勾选默认的第一、第二选项，点击“Next”按钮继续到下图的界面：</p>
<h2 id="11配置实验选项">11配置实验选项</h2>
<p><img src="https://JHome17.github.io/post-images/1670342875334.png" alt="" loading="lazy"><br>
这个界面是配置实验选项。</p>
<p>启用实验性的内置添加 -i / -p。（新！）使用实验性的内置交互式add（“ git add -i”或“ git add -p”）。这使其速度更快（尤其是启动！），但尚未被认为是可靠的。</p>
<p>默认不勾选，直接点击“Next”按钮继续到下图的安装进度界面：</p>
<h2 id="12安装进度指示">12安装进度指示</h2>
<p><img src="https://JHome17.github.io/post-images/1670342896603.png" alt="" loading="lazy"><br>
安装进度结束之后，会出现下图的完成Git安装向导界面：</p>
<h2 id="13安装完成">13安装完成</h2>
<p><img src="https://JHome17.github.io/post-images/1670342933337.png" alt="" loading="lazy"><br>
在这个界面，可以勾选是否启动启动Git Bash和是否查看发行说明，然后点“Finish”按钮退出安装界面。</p>
<h2 id="14启动测试">14启动测试</h2>
<p>到此，Git的安装完成，可以在开始菜单中看到Git的三个启动图标（Git Bash、Git CMD(Deprecated)、Git GUI）。<br>
Git Bash，是Git配套的一个控制台，点击打开如下图：<br>
<img src="https://JHome17.github.io/post-images/1670342965243.png" alt="" loading="lazy"></p>
<p>Git CMD(Deprecated)，是通过CMD使用Git（不推荐使用），点击打开如下图：<br>
<img src="https://JHome17.github.io/post-images/1670343095110.png" alt="" loading="lazy"></p>
<p>Git GUI，是Git的可视化操作工具，点击打开如下图：<br>
<img src="https://JHome17.github.io/post-images/1670343110923.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[😑Node.js安装及环境配置之Windows篇]]></title>
        <id>https://JHome17.github.io/post/nodejs-an-zhuang-ji-huan-jing-pei-zhi-zhi-windows-pian/</id>
        <link href="https://JHome17.github.io/post/nodejs-an-zhuang-ji-huan-jing-pei-zhi-zhi-windows-pian/">
        </link>
        <updated>2022-12-05T15:00:57.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文为转载，原贴地址：<a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html">https://www.cnblogs.com/zhouyu2017/p/6485265.html</a></p>
</blockquote>
<h1 id="一-安装环境">一、安装环境</h1>
<p>1、本机系统：Windows 10 Pro（64位）<br>
2、Node.js：v6.9.2LTS（64位</p>
<h1 id="二-安装nodejs步骤">二、安装Node.js步骤</h1>
<p>1、下载对应你系统的Node.js版本:https://nodejs.org/en/download/<br>
2、选安装目录进行安装<br>
3、环境配置<br>
4、测试</p>
<h1 id="三-前期准备">三、前期准备</h1>
<p>1、Node.js简介<br>
简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>
2、下载Node.js<br>
打开官网下载链接:<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a> 我这里下载的是node-v6.9.2-x64.msi,如下图：<img src="https://JHome17.github.io/post-images/1670253701089.png" alt="" loading="lazy"></p>
<h1 id="四-开始安装">四、开始安装</h1>
<p>1、下载完成后，双击“node-v6.9.2-x64.msi”，开始安装Node.js<br>
<img src="https://JHome17.github.io/post-images/1670253735388.png" alt="" loading="lazy"><br>
点击【Next】按钮<br>
<img src="https://JHome17.github.io/post-images/1670253772866.png" alt="" loading="lazy"><br>
勾选复选框，点击【Next】按钮<br>
<img src="https://JHome17.github.io/post-images/1670253789649.png" alt="" loading="lazy"><br>
修改好目录后，点击【Next】按钮<br>
<img src="https://JHome17.github.io/post-images/1670253830925.png" alt="" loading="lazy"></p>
<p><img src="https://JHome17.github.io/post-images/1670253901271.png" alt="" loading="lazy"><br>
安装完后点击【Finish】按钮完成安装</p>
<figure data-type="image" tabindex="1"><img src="https://JHome17.github.io/post-images/1670253923708.png" alt="" loading="lazy"></figure>
<p>至此Node.js已经安装完成，可以先进行下简单的测试安装是否成功了，后面还要进行环境配置<br>
在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口<br>
<img src="https://JHome17.github.io/post-images/1670253947537.png" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670253964223.png" alt="" loading="lazy"></p>
<p>安装完后的目录如下图所示：<br>
<img src="https://JHome17.github.io/post-images/1670253989506.png" alt="" loading="lazy"><br>
<em>此处说明下：新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西</em>*</p>
<h1 id="五-环境配置">五、环境配置</h1>
<p>说明：这里的环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。<br>
例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【node_global】及【node_cache】如下图：<img src="https://JHome17.github.io/post-images/1670254076773.png" alt="" loading="lazy"></p>
<p>创建完两个空文件夹之后，打开cmd命令窗口，输入<br>
<code> npm config set prefix &quot;D:\Develop\nodejs\node_global&quot;</code><br>
<code>npm config set cache &quot;D:\Develop\nodejs\node_cache&quot;</code><br>
<img src="https://JHome17.github.io/post-images/1670254877044.png" alt="" loading="lazy"></p>
<p>接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”<br>
<img src="https://JHome17.github.io/post-images/1670254939994.png" alt="" loading="lazy"><br>
进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】，将【用户变量】下的【Path】修改为【D:\Develop\nodejs\node_global】<img src="https://JHome17.github.io/post-images/1670254967712.png" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670254981507.png" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670254998211.png" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670255013691.png" alt="" loading="lazy"></p>
<h1 id="六-测试">六、测试</h1>
<p>配置完后，安装个module测试下，我们就安装最常用的express模块，打开cmd窗口，<br>
输入如下命令进行模块的全局安装：<br>
<img src="https://JHome17.github.io/post-images/1670255092924.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[😈Hexo配置静态网站（2022年12月新版）]]></title>
        <id>https://JHome17.github.io/post/hexo-pei-zhi-jing-tai-wang-zhan-2022-nian-12-yue-xin-ban/</id>
        <link href="https://JHome17.github.io/post/hexo-pei-zhi-jing-tai-wang-zhan-2022-nian-12-yue-xin-ban/">
        </link>
        <updated>2022-12-05T13:48:33.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E8%AD%A6%E5%91%8A">警告</a></li>
<li><a href="#%E9%83%A8%E7%BD%B2%E6%80%9D%E8%B7%AF%E5%9B%BE">部署思路图</a></li>
<li><a href="#%E9%9A%BE%E5%BA%A6%E5%88%86%E7%BA%A7%E4%B8%80%E6%98%9F">难度分级：一星</a></li>
<li><a href="#%E6%90%AD%E5%BB%BA%E6%80%9D%E8%B7%AF">搭建思路</a></li>
<li><a href="#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87">前期准备</a></li>
<li><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5nodejs%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE">第一步：nodejs安装和配置</a></li>
<li><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5git%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE">第二步：git安装和配置</a></li>
<li><a href="#%E7%8E%AF%E5%A2%83%E9%AA%8C%E8%AF%81%E9%AA%8C%E8%AF%81%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E5%A5%BDnodejs%E5%92%8Cgit">环境验证：验证是否安装好nodejs和git</a></li>
<li><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5hexo%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE">第三步：hexo的安装和配置</a>
<ul>
<li><a href="#%E5%B0%8F%E7%BB%93">小结：</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%B3%A8%E5%86%8C-%E4%B8%80%E4%B8%AAgithub%E8%B4%A6%E5%8F%B7%E4%B8%8D%E4%BC%9A%E7%9A%84%E8%87%AA%E8%A1%8C%E7%99%BE%E5%BA%A6%E6%B3%A8%E5%86%8C%E5%90%8D%E9%82%AE%E7%AE%B1%E5%AF%86%E7%A0%81%E5%AF%B9%E4%BA%8E%E6%9C%AC%E6%AC%A1%E5%8D%9A%E5%AE%A2%E7%89%B9%E5%88%AB%E9%87%8D%E8%A6%81">第四步注册  一个GitHub账号，不会的自行百度（注册名+邮箱+密码对于本次博客特别重要）</a></li>
<li><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E5%88%B0%E6%9C%AC%E5%9C%B0">第五步初始化Hexo到本地</a>
<ul>
<li><a href="#%E5%9C%A8%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E9%83%A8%E7%BD%B2-hexo-%E6%A1%86%E6%9E%B6%E5%B9%B6%E7%94%9F%E6%88%90-demo-%E7%BD%91%E7%AB%99%E4%BB%A5%E6%B5%8B%E8%AF%95%E6%9C%AC%E5%9C%B0%E8%AE%BF%E9%97%AE%E6%98%AF%E5%90%A6%E6%AD%A3%E5%B8%B8">在指定文件夹下部署 hexo 框架，并生成 Demo 网站以测试本地访问是否正常</a></li>
<li><a href="#%E8%BF%99%E6%AD%A5%E4%BC%9A%E7%94%A8%E5%88%B0%E7%9A%84-hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">这步会用到的 hexo 常用命令</a></li>
</ul>
</li>
<li><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5github%E6%96%B0%E5%BB%BA%E4%BB%A3%E7%A0%81%E4%BB%93%E5%BE%88%E9%87%8D%E8%A6%81">第六步GitHub新建代码仓💕（很重要）</a></li>
<li><a href="#%E7%AC%AC%E4%B8%83%E6%AD%A5%E7%BB%91%E5%AE%9Assh%E7%A7%98%E9%92%A5">第七步绑定ssh秘钥</a></li>
<li><a href="#%E7%AC%AC%E5%85%AB%E6%AD%A5%E4%B8%BAhexo%E9%93%BE%E6%8E%A5%E5%88%B0github%E8%80%8C%E5%81%9A%E7%9A%84%E9%85%8D%E7%BD%AE">第八步为Hexo链接到GitHub而做的配置</a></li>
<li><a href="#hexo%E7%BD%91%E7%AB%99%E7%9A%84%E4%BF%AE%E6%94%B9%E7%BD%91%E9%A1%B5%E7%9A%84%E8%83%8C%E6%99%AF%E9%A1%B5%E9%9D%A2%E5%B0%BA%E5%AF%B8%E7%AD%89%E4%BF%AE%E6%94%B9">hexo网站的修改（网页的背景，页面尺寸等修改）</a></li>
</ul>
</p>
<h1 id="前言">前言</h1>
<blockquote>
<p>前言：分三个部分，git部分，hexo部分，静态网页的修改，写文章和上传图片（用的老王图床，后面会换成存在本地）；附：老王图床：<a href="https://img.gejiba.com/">https://img.gejiba.com/</a></p>
</blockquote>
<blockquote>
<p>参考教程：<a href="https://tommyzeng.com/pages/31689e/#%E5%89%8D%E8%A8%80">https://tommyzeng.com/pages/31689e/#前言</a><br>
B站视频链接：<a href="https://www.bilibili.com/video/BV1mU4y1j72n/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click">https://www.bilibili.com/video/BV1mU4y1j72n/?spm_id_from=333.788.top_right_bar_window_custom_collection.content.click</a><br>
视频已经保存在网盘啦！<a href="https://pan.quark.cn/s/05e6a9b0ba55">https://pan.quark.cn/s/05e6a9b0ba55</a></p>
</blockquote>
<blockquote>
<p>** cmd怎么以管理员身份运行 **<br>
<code>Win+R</code>，输入cmd，<code>ctrl+shift+enter</code></p>
</blockquote>
<blockquote>
<p>资料链接：<br>
git官网下载：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>
git淘宝镜像：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">https://registry.npmmirror.com/binary.html?path=git-for-windows/</a><br>
git镜像来源：<a href="https://blog.csdn.net/qingbo_2920249511/article/details/121465228">https://blog.csdn.net/qingbo_2920249511/article/details/121465228</a><br>
nodejs下载：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a></p>
</blockquote>
<blockquote>
<p>静态网站相较于动态网站没有背后的数据库，所以约等于一个用代码生成的图形页面。这样子的优点是成本很低，可以直接部署在 Github 或者 Gitee 上。目前非常多的静态网站使用的框架是 Hexo，相关的资源非常多，且成本低廉可依靠开源平台免费部署并做到自动负载均衡，是新手入坑的不二之选。<br>
1、自动负载均衡可以理解为不用担心有人恶意攻击你的服务器，因为是部署在 Github 等大型平台上，网站已经帮你做好了相关工作<br>
2、本教程时 hexo 框架部署的最新教程， 时间坐标 2022 年 3 月 21 日， 请注意时效， 从目前情况看很多教程乃至 2021 年 8 月的教程都不一定适用， 所以相应的操作教程最好找最新的。</p>
</blockquote>
<blockquote>
<p>本文是弄Hexo博客时期写的了，教程方法在（2022.10.16）依旧可行，有想做一个简单的静态网站的可以尝试。Hexo相对来说没Vue那么强的高度可自定义性，这是我转为Vuepress的主要原因</p>
</blockquote>
<h1 id="警告">警告</h1>
<p><strong>必须在隐藏文件 config 文件下加入 user 信息， 填写个人 github id 和邮箱</strong></p>
<h1 id="部署思路图">部署思路图</h1>
<figure data-type="image" tabindex="1"><img src="https://JHome17.github.io/post-images/1670251880356.jpg" alt="" loading="lazy"></figure>
<h1 id="难度分级一星">难度分级：一星</h1>
<p>不需要什么编程基础，不过需要些计算机操作知识 ( 主要是 CMD/PowerShell 方面 ) ，过程中可能会遇到很多错误 ( 主要是因为电脑没配置控制台相关的框架和设置所致 ) ，但由于前者众多，所有问题都可以在百度搜出来</p>
<blockquote>
<p>Tips<br>
如果搜不出来要多尝试不同的关键词，不到万不得已不去提问 ( 逼自己一把 ) 。要知道这是提高自己自主解决问题及检索关键词凝练能力的绝佳机会，要牢记成为大佬的路大多数得靠自己检索，问别人是解决问题时非常低效的方法且浪费了提高关键词提炼能力的机会</p>
</blockquote>
<h1 id="搭建思路">搭建思路</h1>
<p>安装好 Node.js 和 Git 后根据国内特定网络环境， 可以安装 cnpm ( 中国版 npm ) 以更佳方便的安装hexo框架</p>
<ol>
<li>
<p>使用 npm/cnpm 安装 hexo 框架</p>
</li>
<li>
<p>hexo 框架初始化， 省成本地网页文件</p>
</li>
<li>
<p>Github/Gitee 建立仓库对应仓库， 并使用 Git 生成专属的 SSH 密钥与各个账户连接</p>
</li>
<li>
<p>配置本地 hexo 内的网路参数：如账号， 网址链接等信息</p>
</li>
<li>
<p>使用终端命令上传部署 hexo, 实现网址访问效果</p>
</li>
</ol>
<h1 id="前期准备">前期准备</h1>
<p>环境配置可以理解成盖房子，系统就是人在计算机这个平台内创建的一个世界，而各种环境配置则可以理解成盖房子前的打地基以及各种预埋的水管电路，在这个基础上才好进行建设，以实现自己向要的效果</p>
<blockquote>
<p>Node.js<br>
一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以让 js 具有和别的平台性语言同台竞争的机会<br>
下载地址： Node.js <a href="https://nodejs.org/">https://nodejs.org/</a> 下载长期维护版即可<br>
安装时 Node 会自动安装 npm ( nodepackage manager ) 帮助用户管理各类插件<br>
具体安装文档请参考这篇文章：<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">nodejs安装</a>，大佬的这篇文章已经搬运至本播客。</p>
</blockquote>
<blockquote>
<p>Git<br>
这是一款非常强大的版本管理软件，不只是可以用于 hexo 部署，还可以管理各类 GitHub 的仓库项目 ( 上传下载 ) 。可以这么说，初学者要想玩转 Github 绝对不能不用 Git。<br>
下载地址：<a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a><br>
建议下载 Standalone Installer 版本<br>
<img src="https://JHome17.github.io/post-images/1670341336854.png" alt="" loading="lazy"></p>
</blockquote>
<h1 id="第一步nodejs安装和配置">第一步：nodejs安装和配置</h1>
<p>安装教程：<a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">nodejs安装</a></p>
<h1 id="第二步git安装和配置">第二步：git安装和配置</h1>
<p>安装教程：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">Git安装教程</a></p>
<h1 id="环境验证验证是否安装好nodejs和git">环境验证：验证是否安装好nodejs和git</h1>
<p>使用 Powershell 或者 CMD 的命令行终端，输入代码后查询<br>
<code>//版本查询代码，显示出版本表示安装成功</code><br>
<code>node -v</code><br>
<code>npm -v</code><br>
<code>git --version</code><br>
<img src="https://JHome17.github.io/post-images/1670341391344.png" alt="" loading="lazy"></p>
<h1 id="第三步hexo的安装和配置">第三步：hexo的安装和配置</h1>
<p>在 cmd 窗口输入以下代码，以启动 hexo 框架部署程序 ( 这里指的是部署脚本，可以在指定路径下部署 hexo 网页的文件 )（npm为nodejs的命令。）<br>
<code>npm install hexo-cli -g</code></p>
<p>如果网络不可以就装国内的淘宝源头<br>
<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>
再将上面的执行命令中的 <code>npm</code> 改为 <code>cnpm</code> 执行即可：<br>
<code>cnpm install hexo-cli -g</code></p>
<p>安装成功：<br>
<img src="https://JHome17.github.io/post-images/1670344030311.jpg" alt="" loading="lazy"></p>
<blockquote>
<p>常见报错<br>
问题: 提示系统中禁止运行脚本的方法<br>
在 <code>win+i </code>设置界面中搜索 <code>power</code> 在开发者选项中找到选项勾选并点击应用即可<br>
<img src="https://JHome17.github.io/post-images/1670343859652.png" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670343866107.png" alt="" loading="lazy"></p>
</blockquote>
<h2 id="小结">小结：</h2>
<ol>
<li>配置环境：Git和nodejs；</li>
<li>安装Hexo：<code>npm install hexo-cli -g</code></li>
<li>验证是否安装成功：<br>
<code>node -v</code><br>
<code>npm -v</code><br>
<code>git --version</code><br>
<code>hexo -v</code></li>
</ol>
<h1 id="第四步注册-一个github账号不会的自行百度注册名邮箱密码对于本次博客特别重要">第四步注册  一个GitHub账号，不会的自行百度（注册名+邮箱+密码对于本次博客特别重要）</h1>
<h1 id="第五步初始化hexo到本地">第五步初始化Hexo到本地</h1>
<h2 id="在指定文件夹下部署-hexo-框架并生成-demo-网站以测试本地访问是否正常">在指定文件夹下部署 hexo 框架，并生成 Demo 网站以测试本地访问是否正常</h2>
<ol>
<li>新建个人博客的文件夹，推荐取名为 Blog 即可 在空目录下右键，点击 Git Bash here 打开 Git 终端<br>
<img src="https://JHome17.github.io/post-images/1670344917417.png" alt="" loading="lazy"></li>
<li>随后在 Git 中进行相关框架的自动初始化<br>
<code>hexo init //在当前路径下初始化 hexo，生成相关文件</code></li>
</ol>
<blockquote>
<p>提示：<br>
在步骤一里如果使用 npm 直接安装 hexo 最好要有魔法上网，不然可能初始化弹出网络连不上 github；使用 cnpm 安装 hexo 的话会自动替换为淘宝的镜像，就不会存在这个问题<br>
如果已经用 npm 安装 hexo，也可以手动修改，路径如下 你设定的扩展插件安装路径 \node_modules\hexo-cli\console\init.js 文件 如果没有设定路径，默认如下 C: \Users'你的用户名'\AppData\Roaming\npm\node_modules\hexo-cli\lib\console\init.js<br>
注意：将：<br>
<code>const GIT_REPO_URL = 'https://github.com/hexojs/hexo-starter.git';</code><br>
替换为：<br>
<code>const GIT_REPO_URL = 'https://github.com.cnpmjs.org/hexojs/hexo-starter.git';</code><br>
再次运行 <code>hexo init</code> 即可</p>
</blockquote>
<ol start="3">
<li>运行 hexo server 生成本地 Web 服务<br>
<code>hexo s //生成静态网页文件</code><br>
随后便会在下方显示出生成的本地网址以及运行端口，复制即可 ( 注意这里的复制不是 ctrl+c, 最好使用右键复制， 本质上 git 的操作是基于 Linux 的操作逻辑的 )<br>
<img src="https://JHome17.github.io/post-images/1670345207575.png" alt="" loading="lazy"><br>
进入该网站就可以看到生成好的模板网站了， 网站页面中的 Hello world 文档有几个常用命令给大家总结一下</li>
</ol>
<h2 id="这步会用到的-hexo-常用命令">这步会用到的 hexo 常用命令</h2>
<ol>
<li>
<p>在本地运行静态服务器，按 <code>ctrl+c</code> 结束<br>
<code>hexo server可以简写为hexo s</code></p>
</li>
<li>
<p>新建一篇文章<br>
警告：会自动生成一个 md 文件在这个路径里， 记得文章的头部 YAML 信息不能删， 要不然配置网站时读取不出来（blog 的文件夹、source_posts\）<br>
<code>hexo new &quot;文章名字&quot;</code></p>
</li>
<li>
<p>清除缓存文件和已生成的静态文件 ( public 文件夹 )<br>
<code> hexo clean</code></p>
<blockquote>
<p>注意：在某些情况 ( 尤其是更换主题后 ) ，如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
</blockquote>
</li>
<li>
<p>生成静态文件 全称: <code>hexo generate</code><br>
<code> hexo g</code><br>
通常和 clean 配套使用， 以防止出现些奇怪的问题</p>
</li>
<li>
<p>上传部署至服务器<br>
在配置好各个文件后， 使用以下命令上传部署至服务器， 即可实现网址访问<br>
<code>hexo deploy可简写成hexo d</code></p>
</li>
</ol>
<blockquote>
<p>注意</p>
</blockquote>
<p>这里部署失败了很正常，分两种情况 第一种是第一次上传，需要和服务器链接并建立链接，成功率较低，多试几次即可 第二种是平常要更新网站，上传失败也是多上传几次 更多错误请看 Hexo 常见报错 大章节</p>
<h1 id="第六步github新建代码仓很重要">第六步GitHub新建代码仓💕（很重要）</h1>
<ol>
<li>新建代码仓库，设置名字<br>
<img src="https://JHome17.github.io/post-images/1670346561280.jpg" alt="" loading="lazy"><br>
一定要与注册的时候的ID是一致的，后面跟上gitHub.io，图片上红字的打错了，看图片红框里面的<br>
<img src="https://JHome17.github.io/post-images/1670346566738.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670346571475.jpg" alt="" loading="lazy"></li>
</ol>
<h1 id="第七步绑定ssh秘钥">第七步绑定ssh秘钥</h1>
<p>目的: 建立本地文件和平台的连接通道；</p>
<blockquote>
<p>该教程区别于 2020 年及之前的教程主要是连接方式<br>
Github 2020 年 10 月开始就改了不能直接使用密钥部署， 密钥存在风险， 现在要用 ssh 服务部署 ( 生成 ssh 密钥 )<br>
Github 仓库的默认分支 ( branch ) 改了， 和以前的结构不一样， master 分支变为 main<br>
补充一个 gitee 的 SSH 生成连接教程，大家可以参考下，挺简单的<a href="https://gitee.com/help/articles/4181#article-header0">https://gitee.com/help/articles/4181#article-header0</a></p>
</blockquote>
<ol>
<li>
<p>验证是否安装ssh<br>
打开任意文件夹，在空白处，右键选择<code> Git Bash here</code><br>
输入<code>ssh</code>回车，验证是否安装ssh<br>
<img src="https://JHome17.github.io/post-images/1670347411521.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>使用 Git 注册 SSH<br>
同样是使用 git bash 终端进行操作， ssh 工具是 git 自带的， 无需安装 首先输入代码， 其含义是根据 github 邮箱生成 ssh 密匙<br>
<code>ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; #引号内填入邮箱地址  Github 用这个</code><br>
<code> ssh-keygen -t ed25519 -C &quot;xxxxx@xxxxx.com&quot; #Gitee 平台用这个</code><br>
<img src="https://JHome17.github.io/post-images/1670347645208.jpg" alt="" loading="lazy"><br>
<strong>重点：按 4 下 enter，记得每下间隔 1 秒左右</strong><br>
<img src="https://JHome17.github.io/post-images/1670347701707.jpg" alt="" loading="lazy"></p>
<p>生成地址如下：<code>C: \Users\你的 windows 账户名、.ssh #注意是一个叫.ssh 的文件夹</code><br>
内有几个文件， 记住一定是<code>.pub</code>后缀的文件里的才是公钥， 使用记事本打开， 复制内部的代码<br>
github 的密钥是 id_rsa ，gitee 是 id_ed25519 文件</p>
</li>
<li>
<p>打开 Github, 点击左上角进入设置界面<br>
<img src="https://JHome17.github.io/post-images/1670347928079.png" alt="" loading="lazy"></p>
</li>
</ol>
<p>点击进入 SSH 这个界面<br>
<img src="https://JHome17.github.io/post-images/1670347941686.png" alt="" loading="lazy"></p>
<p>点击新建 SSH key 建立新的 keys<br>
<img src="https://JHome17.github.io/post-images/1670347953264.png" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670347974386.png" alt="" loading="lazy"><br>
输入无误点击下方<code>Add SSH key</code>即可绑定密钥与本电脑</p>
<ol start="4">
<li>验证与 github 是否绑定<br>
输入代码并运行：<br>
<code>ssh -T git@github.com</code><br>
随后输入 <code>yes</code> 即可查询是否绑定成功<br>
如果成功绑定， 最后会显示一串英文提示你成功<br>
<img src="https://JHome17.github.io/post-images/1670348128619.jpg" alt="" loading="lazy"></li>
</ol>
<h1 id="第八步为hexo链接到github而做的配置">第八步为Hexo链接到GitHub而做的配置</h1>
<blockquote>
<p>github更新两个内容：</p>
<ol>
<li>本地上传到github的文件不再使用秘钥验证了，改用令牌token</li>
<li>更改了默认分支</li>
</ol>
</blockquote>
<ol>
<li>修改配置文件<br>
路径<code> \blog\ _config</code>, 在自己建立的博客根目录下找到<code>_config.yml</code>文件， 使用记事本打开, 把最后几行<code> deploy</code> 的文本替换成以下内容：<br>
<img src="https://JHome17.github.io/post-images/1670586361962.jpg" alt="" loading="lazy"><br>
<code>deploy:</code><br>
<code>type: git</code><br>
<code>repository: 你的仓库链接</code><br>
<code>branch: main         //记得不能用 master,master 的都是老教程，因为 github 改分支名称了</code></li>
</ol>
<p><img src="https://JHome17.github.io/post-images/1670586371639.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670586356808.jpg" alt="" loading="lazy"></p>
<ol start="2">
<li>安装 hexo 的部署组件<br>
在 blog 文件下右键打开 git bash 并输入以下代码<br>
<code>npm install hexo-deployer-git --save</code></li>
</ol>
<blockquote>
<p>这里的常见报错解决方法参考这篇文章：<a href="https://blog.csdn.net/qq_35457469/article/details/102924524">https://blog.csdn.net/qq_35457469/article/details/102924524</a></p>
</blockquote>
<ol start="3">
<li>添加个人信息至配置文件</li>
</ol>
<blockquote>
<p>** 2022/03/25 更新 **<br>
这一步要在执行了步骤 npm install hexo-deployer-git --save 后能找到下面提到的文件夹<br>
方法一 ( 推荐 )<br>
<code>git config --global user.name &quot;xxx&quot; #就是仓库名称斜杠前的 id   配置用户名</code><br>
<code>git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</code></p>
</blockquote>
<ol start="4">
<li>部署到 Github 服务器<br>
在 blog 文件下右键打开 git bash 并输入以下代码<br>
<code>hexo d</code><br>
//第一次的话 有可能会跳出输入github用户名密码啥的（不是账号的密码，是token码就是令牌，所以一定要仔细），我当时弄的时候是跳转网页登陆的，没有输入，如果要手动输入的话，注意一定不要输错，不然太麻烦了。</li>
</ol>
<p>上传部署网页到 github 上， 这里报错概率挺高<br>
具体解决问题的几个方法：<br>
** 方法一：**<br>
重复 hexo d 重复尝试， 玄学问题， 大部分情况和网络有关</p>
<p>** 方法二：**<br>
干掉根目录下<code>.deploy_git</code>文件， git bash 中执行以下命令<br>
<code>git config --global core.autocrlf false</code><br>
<code>依次执行</code><br>
<code>hexo clean    //清除缓存</code><br>
<code>hexo g        //重新生成相应 deploy 文件</code><br>
<code>hexo d        //上传服务器并部署新文件</code></p>
<p>可能会用到令牌，以下为令牌的生成方式：<br>
<img src="https://JHome17.github.io/post-images/1670587272917.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670587281216.jpg" alt="" loading="lazy"><br>
给令牌设置时间和权限，这里是30天，到期更新一下，权限可以都勾上。<br>
<img src="https://JHome17.github.io/post-images/1670587286243.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1670587290137.jpg" alt="" loading="lazy"><br>
令牌生成后注意保存，因为只展示一次，关掉就找不到了。</p>
<h1 id="hexo网站的修改网页的背景页面尺寸等修改">hexo网站的修改（网页的背景，页面尺寸等修改）</h1>
<p>待更新。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[😑摄影基础🎉📷]]></title>
        <id>https://JHome17.github.io/post/she-ying-ji-chu/</id>
        <link href="https://JHome17.github.io/post/she-ying-ji-chu/">
        </link>
        <updated>2022-12-01T13:20:32.000Z</updated>
        <content type="html"><![CDATA[<p>写的很生活话，都是些自己的理解</p>
<h1 id="景深-景深越深相片的背景越清晰景深越浅背景越模糊的">景深 景深越深相片的背景越清晰，景深越浅背景越模糊的</h1>
<p>影响景深的因素：焦距、光圈、拍摄距离、感光元件大小（与容许弥散圆半径有关）</p>
<p>景深是指在摄影机镜头或其他成像器前沿着能够取得清晰图像的成像景深相机器轴线所测定的物体距离范围。在聚焦完成后，在焦点前后的范围内都能形成清晰的像，这一前一后的距离范围，便叫做景深。在镜头前方（调焦点的前、后）有一段一定长度的空间，当被摄物体位于这段空间内时，其在底片上的成像恰位于焦点前后这两个弥散圆之间。被摄体所在的这段空间的长度，就叫景深。换言之，在这段空间内的被摄体，其呈现在底片面的影象模糊度，都在容许弥散圆的限定范围内，这段空间的长度就是景深。</p>
<figure data-type="image" tabindex="1"><img src="https://JHome17.github.io/post-images/1669900869547.jpg" alt="" loading="lazy"></figure>
<p>1、光圈<br>
光圈是相机镜头中可以改变中间孔大小的机械装置</p>
<p>光圈=进光量<br>
光圈的数值可以和遮住光圈的面积成正比，那遮住的越多，光圈其实是越小的，于是乎进光量就小了。</p>
<p>最大光圈是f2.8，最小光圈是f22。</p>
<p>进光量越大，照的照片越实越清晰；</p>
<p>最大光圈拍出来的背景是最模糊的，背景模糊，前面的人或者物就更实一些（前实后虚）。<br>
可以这么理解，光圈大，进光多，所以拍到层次更多。光圈小，进光少，所以拍到画面比较平，没有层次</p>
<p>景深：可以理解为物体前后的深度，前后的距离，景深越大，前后关系越明显<br>
数值越大，遮住的面积就越多，那光圈越小，进光量越小，景深越大，适合拍风景之类的，前后关系不明显；<br>
数值越小，光圈越大，进光量越大，景深越小，适合人像，背景虚化这类，前后关系更明显；</p>
<p>2、焦距<br>
焦距越大，景深越小，如长焦镜头的精深比较小，而广角镜头的精神都比较大。</p>
<p>3、拍摄距离（这个好理解呀，看的远看的多，空间大）<br>
拍摄距离越远，景深越大，距离越近，景深越小。</p>
<p>1、光圈越大景深越小，光圈越小景深越大。<br>
2、镜头焦距越长景深越小，反之景深越大。<br>
3、主体越近，景深越小，主体越远，景深越大。</p>
<h1 id="白平衡">白平衡：</h1>
<p>在室内日光灯下，照片会发绿；在室内钨丝灯下，会偏黄；在日光阴影处的会偏蓝。<br>
这些问题要在拍摄前预先设置要白平衡，直出的照片就不会偏差太多。<br>
～如何正确预设白平衡。<br>
自动白平衡，日光白平衡，阴天白平衡，钨丝灯白平衡，白色荧光灯白平衡，闪光灯白平衡<br>
<img src="https://JHome17.github.io/post-images/1669900903117.jpeg" alt="" loading="lazy"></p>
<h1 id="感光度iso">感光度（ISO）</h1>
<p>感光材料感光的快慢程度。<br>
感光度越高，胶片越灵敏（就是在同样的拍摄环境下正常拍摄同一张照片所需要的光线越少，其表现为能用更高的快门或更小的光圈），感光度越高，躁点越多。锐化越多</p>
<h1 id="曝光与曝光补偿">曝光与曝光补偿</h1>
<p>曝光（Exposure）<br>
光到达胶片表面使胶片感光的过程，需要注意的是，我们说的曝光是指胶片感光，这是我们得到照片所必需经过的一个过程，它常取决于光圈和快门的组合，因此又有曝光组合一词。比如，用测光表测得快门为1/30秒时，光圈应用5.6，这样，F5.6、1/30秒就是一个曝光组合。<br>
<img src="https://JHome17.github.io/post-images/1669900928509.jpeg" alt="" loading="lazy"></p>
<p>曝光补偿（Exposure Compensation）</p>
<h1 id="测光原理及方式-18测光原理和测光方法">测光原理及方式 18%测光原理和测光方法</h1>
<p>其实测光的原理非常简单，就是相机的测光系统在拍摄者设定的测光模式下，按照相机自动假设所测光区域的反光率都是18%的规律，18%灰数值的是数万张正确曝光的照片进行平均亮度的计算得到的数值，然后得到的结果就是给相机正确曝光的参数就是使整张照片的平均亮度为18%灰的一个中灰色。通过这个比例进行测光随后确定光圈和快门的参数的组合。光圈大小和快门快慢是有相关联系的，在光亮度不变的条件下，如果要得到相同的曝光量，光圈越大，则需要快门越快；光圈越小，则需要的快门越慢。</p>
<h1 id="上手就会的构图攻略">上手就会的构图攻略</h1>
<ul>
<li>利用视觉来拍照</li>
<li>利用画面视觉流程引出视导线</li>
<li>利用光线规划视觉流程，如：高光、光束</li>
<li>利用线条规划视觉流程</li>
<li>视线、景物线条<br>
<img src="https://JHome17.github.io/post-images/1669901090664.jpg" alt="" loading="lazy"></li>
</ul>
<h1 id="14种构图法则">14种构图法则</h1>
<p>好的构图能给画面增添色彩<br>
<img src="https://JHome17.github.io/post-images/1669901111762.jpg" alt="" loading="lazy"></p>
<h1 id="全自动曝光模式与场景模式">全自动曝光模式与场景模式</h1>
<p>市面上的相机大多的几种模式分类<br>
全自动曝光模式：场景智能自动模式、闪光灯关闭模式、创意自动模式<br>
场景模式：人像模式、风光模式、微距模式、运动模式、儿童模式、食物模式、烛光模式、夜景<br>
人像模式、手持夜景模式、HDR逆光控制模式<br>
创意滤镜模式<br>
高级曝光模式：程序自动模式、快门优先模式Tv、光圈优先模式Av、全手动模式M、B门模式</p>
<h1 id="如何设置光圈控制-曝光景深">如何设置光圈控制 曝光景深</h1>
<p>光圈是如何影响曝光和景深的<br>
<img src="https://JHome17.github.io/post-images/1669901167219.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1669901176475.jpg" alt="" loading="lazy"></p>
<p>光圈是如何影响景深的<br>
光圈叶片大小不仅影响通过镜头的光量，而且影响图像的清晰度，是影响所谓景深的重要因素之一。</p>
<p>景深定义为在图像中显示清晰的最近和最远对象之间的距离。如果没有景深，镜头的焦平面很薄，会给摄影带来很多麻烦。例如，如果我们拍摄一个人的照片，他们的鼻尖会清晰对焦，但其余部分会完全模糊。景深允许焦平面具有可见的景深。</p>
<p>景深是镜头光圈大小、镜头焦距、被摄体与相机之间的距离以及其他称为混淆圈的函数。出于本文的目的，我们将仅讨论与光圈相关的景深。根据您的相机和镜头，通过将光圈打开到最宽的设置，您可以将焦平面的范围缩小到非常小的距离。这可用于摄影、特写镜头中的创意构图，最常用于在拍摄肖像时模糊远处的背景。</p>
<p>光圈不仅控制通过镜头的光量，还影响光线进入镜头时的角度。我们不是在谈论镜头如何校正光线，我们是在谈论穿过物体的光线如何被该物体轻微弯曲，在此示例中，该物体是镜头的光圈叶片。这种光的断裂称为衍射，是光的波动特性的一个特征。</p>
<p>当您关闭光圈时，您会使衍射更接近图像的中心。很多刚开始了解光圈的摄影师认为，提高锐度的关键是把光圈关小，因为光圈对景深的影响。然而，由于衍射，这是不正确的。当您通过缩小光圈来增加景深时，您也在增加图像中的衍射量，这会导致图像失去清晰度。</p>
<h1 id="平时的拍照设备">平时的拍照设备</h1>
<p>拍人像买定焦镜头，或者135变焦，风光可以买200变焦或者其他</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[😋Mac安装PS眼睛糖果滤镜（Alien Skin Eye Candy7）]]></title>
        <id>https://JHome17.github.io/post/mac-an-zhuang-ps-yan-jing-tang-guo-lu-jing-alien-skin-eye-candy7/</id>
        <link href="https://JHome17.github.io/post/mac-an-zhuang-ps-yan-jing-tang-guo-lu-jing-alien-skin-eye-candy7/">
        </link>
        <updated>2022-05-20T12:15:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装包下载">安装包下载</h1>
<p>PS眼睛糖果滤镜（Alien Skin Eye Candy7）<a href="https://pan.quark.cn/s/701b65bf83ba#/list/share">https://pan.quark.cn/s/701b65bf83ba#/list/share</a></p>
<h1 id="硬件软件环境">硬件软件环境</h1>
<figure data-type="image" tabindex="1"><img src="https://JHome17.github.io/post-images/1669897338082.jpg" alt="" loading="lazy"></figure>
<h1 id="安装步骤">安装步骤</h1>
<h2 id="1-1正常版本双击可以直接安装如果报错就用备用版本">1. 1正常版本：双击可以直接安装，如果报错就用备用版本</h2>
<figure data-type="image" tabindex="2"><img src="https://JHome17.github.io/post-images/1669897415922.jpg" alt="" loading="lazy"></figure>
<h3 id="12-备用版本">1.2 备用版本</h3>
<figure data-type="image" tabindex="3"><img src="https://JHome17.github.io/post-images/1669897421597.jpg" alt="" loading="lazy"></figure>
<h2 id="1-双击房子弹出的界面直接按回车">1. 双击房子，弹出的界面直接按回车</h2>
<p><img src="https://JHome17.github.io/post-images/1669897589545.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1669897609016.jpg" alt="" loading="lazy"></p>
<h2 id="2-双击图标开始安装也可以拖进右边的文件夹再双击安装感觉没啥区别">2. 双击图标，开始安装（也可以拖进右边的文件夹再双击安装，感觉没啥区别）</h2>
<p><img src="https://JHome17.github.io/post-images/1669897648615.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1669897666206.jpg" alt="" loading="lazy"></p>
<h2 id="3-主机选择安装路径随便建一个路径安装好之后方便复制出来就行">3. 主机选择（安装路径），随便建一个路径，安装好之后方便复制出来就行</h2>
<p><img src="https://JHome17.github.io/post-images/1669897677766.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1669897767742.jpg" alt="" loading="lazy"></p>
<h2 id="4-复制上面刚刚设置的文件夹里面的两个文件到你安装的ps版本的插件文件夹下面">4. 复制上面刚刚设置的文件夹里面的两个文件到你安装的ps版本的插件文件夹下面</h2>
<figure data-type="image" tabindex="4"><img src="https://JHome17.github.io/post-images/1669897788523.jpg" alt="" loading="lazy"></figure>
<h2 id="5-ps滤镜下打开插件">5. PS滤镜下打开插件</h2>
<figure data-type="image" tabindex="5"><img src="https://JHome17.github.io/post-images/1669897795084.jpg" alt="" loading="lazy"></figure>
<h2 id="6-完美运行">6. 完美运行</h2>
<figure data-type="image" tabindex="6"><img src="https://JHome17.github.io/post-images/1669898056573.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[😍新电脑-Mac-Intel非M1（软件+设置）]]></title>
        <id>https://JHome17.github.io/post/xin-dian-nao-mac-intel-fei-m1ruan-jian-she-zhi/</id>
        <link href="https://JHome17.github.io/post/xin-dian-nao-mac-intel-fei-m1ruan-jian-she-zhi/">
        </link>
        <updated>2022-05-12T12:46:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="设计软件">设计软件🎨</h1>
<p>AI2020<a href="https://pan.quark.cn/s/cef7cce995b0#/list/share">https://pan.quark.cn/s/cef7cce995b0#/list/share</a><br>
PS2020<a href="https://pan.quark.cn/s/b9a0ef303f91#/list/share">https://pan.quark.cn/s/b9a0ef303f91#/list/share</a><br>
ID2020<a href="https://pan.quark.cn/s/cb1b215438e2#/list/share">https://pan.quark.cn/s/cb1b215438e2#/list/share</a><br>
Blender 3.1.2<a href="https://pan.quark.cn/s/5108e659863b#/list/share">https://pan.quark.cn/s/5108e659863b#/list/share</a><br>
Snipaste：好用的截图软件<a href="https://pan.quark.cn/s/c4e931a72a2b#/list/share">https://pan.quark.cn/s/c4e931a72a2b#/list/share</a><br>
Glyphs：做字软件（只有mac）<a href="https://pan.quark.cn/s/e954f3305f13">https://pan.quark.cn/s/e954f3305f13</a><br>
Typeface：字体管理软件<a href="https://pan.quark.cn/s/3a4b06a48f7f">https://pan.quark.cn/s/3a4b06a48f7f</a></p>
<h1 id="一些插件">一些插件🌮</h1>
<p>搞定设计助理 0.3.0：PS插件（以为能用上，结果还是用不上）<a href="https://pan.quark.cn/s/81876d4dfead">https://pan.quark.cn/s/81876d4dfead</a><br>
率叶：图片快脱<a href="https://pan.quark.cn/s/b8816fb4a40d">https://pan.quark.cn/s/b8816fb4a40d</a><br>
率叶：图片快脱浏览器插件<a href="https://pan.quark.cn/s/99e7021411d1">https://pan.quark.cn/s/99e7021411d1</a><br>
Alien Skin Eye Candy 7：超级好用的PS特效插件，安装教程已出<a href="https://pan.quark.cn/s/c0619e84bb0c">https://pan.quark.cn/s/c0619e84bb0c</a><br>
<s>AI插件合集：旧版不好用的话，去www.epinv.com下载新版</s><br>
AI插件合集：memm公众号<a href="https://pan.quark.cn/s/a33d57ead5a0">https://pan.quark.cn/s/a33d57ead5a0</a></p>
<h1 id="办公软件">办公软件👩🏼‍💻</h1>
<p>Keka：解压缩<a href="https://pan.quark.cn/s/171364a402c9">https://pan.quark.cn/s/171364a402c9</a><br>
Motrix：开源下载<a href="https://pan.quark.cn/s/485a4dde8952">https://pan.quark.cn/s/485a4dde8952</a><br>
Typora 1.2.4：MD写作客户端<a href="https://pan.quark.cn/s/b7f9c9221e6c">https://pan.quark.cn/s/b7f9c9221e6c</a><br>
向日葵远程<a href="https://pan.quark.cn/s/b93a0612d9ca">https://pan.quark.cn/s/b93a0612d9ca</a><br>
谷歌浏览器<a href="https://pan.quark.cn/s/9b72c1b13120">https://pan.quark.cn/s/9b72c1b13120</a><br>
Eagle：图片收集<a href="https://pan.quark.cn/s/855e2ad30d0c">https://pan.quark.cn/s/855e2ad30d0c</a><br>
WetChat：微信<a href="https://pan.quark.cn/s/8ec8deddfa1a">https://pan.quark.cn/s/8ec8deddfa1a</a><br>
钉钉<a href="https://pan.quark.cn/s/76998c285c12">https://pan.quark.cn/s/76998c285c12</a><br>
百度网盘<a href="https://pan.quark.cn/s/c015a0ac14f5">https://pan.quark.cn/s/c015a0ac14f5</a><br>
阿里云盘<a href="https://pan.quark.cn/s/56e3bd9c0ae1">https://pan.quark.cn/s/56e3bd9c0ae1</a><br>
夸克网，盘去官网下吧<a href="https://pan.quark.cn/s/82d96388b9d8">https://pan.quark.cn/s/82d96388b9d8</a><br>
Mounty-M1芯片：可写入和读取NTFS格式的U盘<a href="https://pan.quark.cn/s/95cd7e7ee01b">https://pan.quark.cn/s/95cd7e7ee01b</a><br>
uTools： 新一代效率工具平台<a href="https://pan.quark.cn/s/73f9789472a8">https://pan.quark.cn/s/73f9789472a8</a><br>
Todesk：免费远程，替代向日葵<a href="https://pan.quark.cn/s/c7dc391e1a90">https://pan.quark.cn/s/c7dc391e1a90</a><br>
Tuxera.NTFS：intel mac的移动硬盘读取<a href="https://pan.quark.cn/s/474b49e8f05b">https://pan.quark.cn/s/474b49e8f05b</a></p>
<h1 id="个人博客">个人博客📝</h1>
<p>Gridea 0.9.2<a href="https://pan.quark.cn/s/7fd1e492e8b9">https://pan.quark.cn/s/7fd1e492e8b9</a><br>
Gridea 0.9.3：这版本更新了代理设置 nice！<a href="https://pan.quark.cn/s/b90e9d7b5cbc">https://pan.quark.cn/s/b90e9d7b5cbc</a></p>
<h1 id="开心软件">开心软件😄</h1>
<p>HandShaker 2.5.6：安卓手机-PC-Mac直接的传输工具<a href="https://pan.quark.cn/s/8548e464a7fc">https://pan.quark.cn/s/8548e464a7fc</a><br>
VPN<a href="https://pan.quark.cn/s/71dd1af06a21">https://pan.quark.cn/s/71dd1af06a21</a><br>
网易云<a href="https://pan.quark.cn/s/c2f03f1e0ccf">https://pan.quark.cn/s/c2f03f1e0ccf</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🤩Gridea+Dev-sidecar+GitHub白嫖个人博客]]></title>
        <id>https://JHome17.github.io/post/grideadev-sidecargithub-bai-piao-ge-ren-bo-ke/</id>
        <link href="https://JHome17.github.io/post/grideadev-sidecargithub-bai-piao-ge-ren-bo-ke/">
        </link>
        <updated>2022-05-07T13:38:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="2022年5月20日更新gridea093版本可以使用gridea自带的代理配置以此解决同步问题即不需要看二-同步失败那一章节啦~093版本的测试环境为mac客户端">2022年5月20日，更新Gridea0.9.3版本，可以使用Gridea自带的代理配置，以此解决同步问题，即不需要看“二、同步失败”那一章节啦～0.9.3版本的测试环境为Mac客户端。</h1>
<p>配置如下：</p>
<ol>
<li>
<p>查看Http代理原理：配合Gridea0.9.3加速github网速<br>
<img src="https://JHome17.github.io/post-images/1669898354585.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>查看所用代理的端口：两个端口号测试一下，哪个可以填哪个<br>
<img src="https://JHome17.github.io/post-images/1669898383784.jpg" alt="" loading="lazy"><br>
上面这个是mac下的VPN代理界面</p>
<p>下面这个是Win下的VPN代理界面，看下方最后一行，第二个Http：127.0.01:10809，是正确的配置端口。<br>
<img src="https://JHome17.github.io/post-images/1670243435379.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>在Griea里面配置Http代理<br>
<img src="https://JHome17.github.io/post-images/1669898604061.jpg" alt="" loading="lazy"><br>
上面这个截图是mac里面的Gridea</p>
</li>
<li>
<p>梯子里面的设置：Pac和全局模式都可以不用特地更改<br>
<img src="https://JHome17.github.io/post-images/1669898655649.jpg" alt="" loading="lazy"></p>
</li>
</ol>
<h1 id="参考链接">参考链接</h1>
<p><a href="https://gridea.dev/gridea-start/">官方文档：快速上手</a><br>
<a href="https://zhuanlan.zhihu.com/p/406234933">Gridea 同步失败解决方法</a><br>
<a href="https://blog.gd1214b.icu/post/F2_C5EVQh/p">解决Gridea同步失败的问题</a><br>
<a href="https://www.bilibili.com/video/BV1tr4y1e75b/?spm_id_from=333.999.0.0&amp;vd_source=1bd6cd08b51f8278e3e75aebeae3f1e2">解决Gridea同步失败</a></p>
<h1 id="工具下载地址">工具下载地址</h1>
<p><a href="https://pan.quark.cn/s/19f8b4a0c790">Gridea工具（大佬修改版）</a><br>
<a href="https://github.com/docmirror/dev-sidecar">开发者边车：加速GitHub同步</a><br>
<a href="https://desktop.github.com/">桌面版GitHub：用于解决同步问题</a></p>
<h1 id="一-配置-注册github-token-检测远程连接-同步">一、配置-注册GitHub-Token-检测远程连接-同步</h1>
<h2 id="安装gridea">安装Gridea</h2>
<p><s><a href="https://gridea.dev/">安装Gridea（正常官网v0.9.2，会有同步失败问题）</a></s><br>
<s><a href="https://github.com/getgridea/gridea/issues/890">安装Gridea（正常官网v0.9.2修改版，Netlify 与系统代理，我没有测试）</a></s><br>
<a href="https://zhuanlan.zhihu.com/p/406234933">安装Gridea（大佬的修改版）</a></p>
<h2 id="配置和发布">配置和发布</h2>
<ol>
<li>创建 GitHub 账号，并创建一个仓库 Token。点击<a href="https://github.com/">GitHub</a>，进行注册。登录 GitHub 之后，点击<a href="https://github.com/settings/tokens/new">这里</a>创建一个 Token，勾选上 repo 的相关权限即可。生成之后记得把 Token 复制到你的本地，因为一旦关闭网页将不能再看到它。<br>
<img src="https://JHome17.github.io/post-images/1651935883399.jpg" alt="" loading="lazy"></li>
<li>创建仓库，存放构建后的网站文件。创建一个公开仓库，名为用户名.github.io。（将用户名替换为你的 GitHub 用户名）<br>
<img src="https://JHome17.github.io/post-images/1651936588773.jpg" alt="" loading="lazy"><br>
<img src="https://JHome17.github.io/post-images/1651936593078.jpg" alt="" loading="lazy"></li>
<li>进入 Gridea 进行远程设置。按照下图的示例进行设置，然后点击「检测远程链接」，进行配置检查。<br>
<img src="https://JHome17.github.io/post-images/1651936598606.jpg" alt="" loading="lazy"></li>
<li>同步。点击 Gridea 中的 同步按钮即可。初次部署等待几分钟之后就可以去浏览器访问了，默认地址为你在第 3 步所填写的域名。</li>
</ol>
<p>以上就可以拥有一个自己的静态博客啦~</p>
<h2 id="gridea主题更换">Gridea主题更换</h2>
<ol>
<li><a href="https://gridea.dev/themes">主题文件下载</a></li>
<li>主题安装，下载完解压后放入themes文件夹，目录如下图；确保解压后的主题文件夹打开就又config.jon和style-override.js，否则会影响“预览”，即主题安装不成功。<br>
<img src="https://JHome17.github.io/post-images/1651936839636.jpg" alt="" loading="lazy"></li>
<li>切换主题<br>
<img src="https://JHome17.github.io/post-images/1651936969059.jpg" alt="" loading="lazy"></li>
</ol>
<h1 id="二-同步失败检测远程链接成功同步失败为网络问题">二、同步失败（检测远程链接成功，同步失败为网络问题）</h1>
<h2 id="前言">前言</h2>
<p>由于众所周知的原因，GitHub在中国大陆地区受到的干扰严重，大部分情况下根本无法连接，这也导致Gridea的同步失败问题。此方法用于同步失败，控制台报错：<code>ETIMEOUT</code> 与 <code>ECONNREST</code><br>
<img src="https://JHome17.github.io/post-images/1651934577241.png" alt="" loading="lazy"></p>
<h2 id="解决方案">解决方案</h2>
<p>通常的解决方案是通过代理服务器连接，但由于大部分的代理软件（如v2rayN等），只能更改系统的代理设置，，像Gridea这些不遵守系统代理设置的软件，无法通过代理服务器连接。<br>
下面介绍一种本人亲测有效的方法, 这种方法的基本原理是用GitHub Desktop将Gridea生成的网页源代码手动push到GitHub上</p>
<h3 id="第一步-连接上代理开发者边车工具">第一步 连接上代理（开发者边车工具）</h3>
<p>由于 Gridea 0.9.2 使用的是新的内置 git，使用开发者边车工具没法代理它。所以我们得改一下。（原作者自己改了Gridea的安装包，我现在用的就是这个，第一次使用GitHub Desktop 手动push之后，就可以用Gridea自己的同步功能同步成功了）<br>
<strong>需自己已单独安装了 Git</strong>，使用Dev-sidecar时，打开软件的Git.exe代理。<br>
具体内容看边车工具主页：<a href="https://github.com/docmirror/dev-sidecar">dev-sidecar开发者边车</a></p>
<h4 id="原作者的修改安装包方法如下">原作者的修改安装包方法如下：</h4>
<p>自己动手编译：已安装 Node.js、Git、yarn</p>
<pre><code>Node.js 版本需大于 v10.0.
git clone https://github.com/getgridea/gridea.git
cd gridea
</code></pre>
<p>此时把文件<code>packege.json</code>里的<code>&quot;isomorphic-git&quot;: &quot;^0.78.3&quot;</code>,替换为<code>&quot;simple-git&quot;: &quot;^1.107.0&quot;</code>,。</p>
<p>未安装 yarn 先 <code>npm install -g yarn</code>安装，然后到 Github 切换 Tags 把 0.9.1 版本的 <code>gridea\src\server\deploy.ts</code>复制到新版本里覆盖。</p>
<pre><code>yarn
yarn electron:serve
yarn electron:build
</code></pre>
<p>命令行跑完后在<code>\gridea\dist_electron</code>找到安装包<br>
<a href="https://pan.quark.cn/s/19f8b4a0c790">修改后的懒人安装包在这里</a></p>
<h3 id="第二步-下载并安装github-desktop">第二步 下载并安装GitHub Desktop</h3>
<p><a href="https://desktop.github.com/">下载地址</a></p>
<h3 id="第三步-登陆github账号">第三步 登陆GitHub账号</h3>
<ol>
<li>点击 Sign into GitHub.com<br>
<img src="https://JHome17.github.io/post-images/1651938342851.jpg" alt="" loading="lazy"></li>
<li>在浏览器里登陆你的GitHub账号<br>
<img src="https://JHome17.github.io/post-images/1651938627440.jpg" alt="" loading="lazy"></li>
</ol>
<h3 id="第四步-清空gridea-配置目录下ouput文件夹里的所有内容">第四步 清空Gridea 配置目录下ouput文件夹里的所有内容</h3>
<blockquote>
<p>需要清空ouput文件夹里的所有内容的原因是GitHub Desktop无法克隆仓库到非空文件夹中，这一步不会影响你的博客数据。<br>
<strong>注意output文件夹不要删除</strong><br>
<img src="https://JHome17.github.io/post-images/1651938847702.jpg" alt="" loading="lazy"></p>
</blockquote>
<h3 id="第五步-在github-desktop中克隆你的博客仓库">第五步 在GitHub Desktop中克隆你的博客仓库</h3>
<p><img src="https://JHome17.github.io/post-images/1651938895081.jpg" alt="" loading="lazy"><br>
<strong>注意目录要选择Gridea 配置目录下ouput文件夹</strong> 由于我操作过了，不知道怎么再来一次，所以用了原博主的截图。<br>
<img src="https://JHome17.github.io/post-images/1651939319908.jpg" alt="" loading="lazy"></p>
<h3 id="第六步-同步gridea">第六步 同步Gridea</h3>
<p>在Gridea中依次点击 远程 &gt; 检测远程连接 &gt; 同步（同步之前也可以预览一下）<br>
这一步无所谓是否同步成功。只是让Gridea生成要发布的内容，我们是要把这个发布的内容同步到GitHub上的。<br>
<img src="https://JHome17.github.io/post-images/1651939492648.jpg" alt="" loading="lazy"></p>
<h3 id="第七步-同步到github上">第七步 同步到GitHub上</h3>
<p>在GitHub Desktop 中点击 Pushu origin。<br>
<img src="https://JHome17.github.io/post-images/1651941394810.jpg" alt="" loading="lazy"></p>
<p>如果有更新的内容，则需要输入<code>main</code>，再点<code>Commit to main</code>，才会出现Pushu origin按钮。<br>
<img src="https://JHome17.github.io/post-images/1651939716160.jpg" alt="" loading="lazy"><br>
等候完成即可。<br>
<strong>用GitHub Desktop还是用Gridea，都要在开始Dev-sidecar，并且打开git.exe代理下，进行同步。</strong><br>
<img src="https://JHome17.github.io/post-images/1651983995790.jpg" alt="" loading="lazy"><br>
之后就可以用GitHub Desktop同步啦~或者可以试试Gridea自己的同步。<br>
<img src="https://JHome17.github.io/post-images/1651941147115.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>